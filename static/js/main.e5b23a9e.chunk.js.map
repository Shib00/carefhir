{"version":3,"sources":["serviceWorker.js","api/index.js","components/PatientList/index.js","Home/index.js","components/PatientInfo/index.js","Summary/index.js","index.js"],"names":["Boolean","window","location","hostname","match","getPatients","serverAddress","serverHeaders","name","axios","get","headers","PatientList","props","data","onClick","className","patients","map","item","index","key","ev","resource","id","appearance","given","charAt","family","size","birthDate","gender","getPatientCard","entry","Home","history","useHistory","getServer","server","localStorage","getItem","getHeaders","useState","fhirServer","setServer","setHeaders","invalidHeader","setHeaderStatus","modalState","setModalState","searchQuery","setSearchQuery","setPatients","onModalClose","modalOptions","open","onClose","backdrop","dimension","modalHeaderOptions","icon","heading","subHeading","handleServerInput","value","useEffect","JSON","parse","then","catch","err","console","log","handleSearchInput","style","margin","clearButton","placeholder","onChange","target","onClear","rows","e","handleHeaderInput","defaultValue","error","setItem","disabled","display","justifyContent","alignItems","length","height","overflowY","push","columnOptions","sizeXL","sizeM","PatientInfo","shadow","width","padding","backgroundColor","maritalStatus","text","telecom","Summary","patientId","useParams","patientData","setPatientData","getPatientData","pageheaderOptions","title","breadcrumb","list","label","link","ReactDOM","render","StrictMode","basename","process","exact","path","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"6SAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6DChBOC,EAAc,SAACC,GAAD,IAAgBC,EAAhB,uDAAgC,GAAhC,OAAuC,WAAgB,IAAfC,EAAc,uDAAP,GACxE,OAAOC,IAAMC,IAAN,UAAaJ,EAAb,yBAA2CE,GAAQ,CACxDG,QAASJ,MCgCEK,G,OAhCK,SAACC,GAAW,IAAD,EACEA,EAAvBC,YADqB,MACd,GADc,EACVC,EAAYF,EAAZE,QAwBnB,OACE,yBAAKC,UAAU,eAvBM,WAAoB,IAAnBC,EAAkB,uDAAP,GACjC,OAAOA,EAASC,KAAI,SAACC,EAAMC,GACzB,OACE,yBAAKJ,UAAU,0BAA0BK,IAAKD,EAAOL,QAAS,SAAAO,GAAE,OAAIP,EAAQO,EAAIH,EAAKI,SAASC,MAC5F,yBAAKR,UAAU,4BACb,kBAAC,IAAD,CAAQS,WAAW,WAAnB,UACMN,EAAKI,SAASf,KAAK,GAAGkB,MAAM,GAAGC,OAAO,IAD5C,OACiDR,EAAKI,SAASf,KAAK,GAAGoB,OAAOD,OAAO,KAErF,kBAAC,IAAD,CAASE,KAAK,KAAd,UAAsBV,EAAKI,SAASf,KAAK,GAAGkB,MAAM,GAAlD,aAAyDP,EAAKI,SAASf,KAAK,GAAGoB,SAC/E,kBAAC,IAAD,CAAOH,WAAW,aAAaN,EAAKI,SAASC,KAE/C,yBAAKR,UAAU,yBACf,kBAAC,IAAD,CAAYS,WAAW,WAAvB,SACA,kBAAC,IAAD,CAAYA,WAAW,UAAUN,EAAKI,SAASO,WAC/C,kBAAC,IAAD,CAAYL,WAAW,WAAvB,YACA,kBAAC,IAAD,CAAYA,WAAW,UAAUN,EAAKI,SAASQ,aASlDC,CAAelB,EAAKmB,UCsIZC,EA9JF,WACX,IAAIC,EAAUC,cACRC,EAAY,WAChB,IAAMC,EAASC,aAAaC,QAAQ,cACpC,OAAOF,GAAkB,IAGrBG,EAAa,WACjB,IAAM3B,EAAOyB,aAAaC,QAAQ,iBAClC,OAAO1B,GAAa,MATL,EAYe4B,mBAASL,KAZxB,mBAYVM,EAZU,KAYEC,EAZF,OAamBF,mBAASD,KAb5B,mBAaVlC,EAbU,KAaKsC,EAbL,OAcwBH,oBAAS,GAdjC,mBAcVI,EAdU,KAcKC,EAdL,OAemBL,oBAASL,KAf5B,mBAeVW,EAfU,KAeEC,EAfF,OAgBqBP,mBAAS,IAhB9B,mBAgBVQ,EAhBU,KAgBGC,EAhBH,OAiBeT,mBAAS,IAjBxB,mBAiBVzB,EAjBU,KAiBAmC,EAjBA,KAmBXC,EAAe,WACnB,IAAIhB,IAIF,OAAO,KAHPY,GAAc,GACdL,EAAUP,MAMRiB,EAAe,CACnBC,KAAMP,EACNQ,QAASH,EACTI,UAAU,EACVC,UAAW,SAGPC,EAAqB,CACzBH,QAASH,EACTO,KAAM,WACNC,QAAS,cACTC,WAAY,uBAGRC,EAAoB,SAACC,GACzBpB,EAAUoB,IAsBZC,qBAAU,WACRrB,EAAUP,KACVQ,EAAWJ,KACPJ,KACFhC,EAAYsC,EAAYuB,KAAKC,MAAM5D,GAAnCF,CAAmD6C,GAClDkB,MAAK,SAAAtD,GACJsC,EAAYtC,EAAKA,SAElBuD,OAAM,SAAAC,GACLC,QAAQC,IAAIF,QAGf,CAAC/B,aAAaC,QAAQ,cAAeQ,IAExC,IAAMyB,EAAoB,SAACT,GACzBb,EAAea,IAmBjB,OAFAO,QAAQC,IAAIvD,GAGV,yBAAKD,UAAU,QACb,kBAAC,IAAUsC,EACT,kBAAC,IAAgBK,GACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOe,MAAO,CAACC,OAAQ,cAAvB,WACA,kBAAC,IAAD,CACEC,aAAa,EACbZ,MAAOrB,EACPnC,KAAK,QACLqE,YAAY,SACZC,SAAU,SAACxD,GAAD,OAAQyC,EAAkBzC,EAAGyD,OAAOf,QAC9CgB,QAAS,kBAAMjB,EAAkB,OAEnC,kBAAC,IAAD,CAAOW,MAAO,CAACC,OAAQ,cAAvB,WACA,kBAAC,IAAD,CACEnE,KAAK,WACLqE,YAAY,UACZI,KAAM,EACNH,SAAU,SAAAxD,GAAE,OAxEI,SAAC0C,GAEzB,IACSE,KAAKC,MAAMH,GAClBjB,GAAgB,GAChBF,EAAWmB,GACX,MAAOkB,GACPnC,GAAgB,GAChBF,EAAWmB,IAgEWmB,CAAkB7D,EAAGyD,OAAOf,QAC5CoB,aAAc7E,EACd8E,MAAOvC,KAEX,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQrB,WAAW,UAAUV,QAAS,kBAhE5CwB,aAAa+C,QAAQ,aAAc3C,GACnCJ,aAAa+C,QAAQ,gBAAiB/E,GACtC0C,GAAc,QACdG,EAAY,KA6DsDmC,UAAW5C,GAAcG,GAArF,YAGJ,yBAAK9B,UAAU,sBACb,yBAAKA,UAAU,cACb,kBAAC,IAAD,CAASa,KAAK,KAAd,YACA,yBAAK6C,MAAO,CAAEc,QAAS,OAAQC,eAAgB,WAAYC,WAAY,WACrE,kBAAC,IAAD,CAAQjE,WAAW,UAAUV,QAAS,kBAAMkC,GAAc,KAA1D,oBAIN,yBAAKjC,UAAU,kBACb,kBAAC,IAAD,CACE4D,aAAa,EACbZ,MAAOd,EACPU,KAAK,SACLpD,KAAK,QACLqE,YAAY,SACZC,SAAU,SAACxD,GAAD,OAAQmD,EAAkBnD,EAAGyD,OAAOf,QAC9CgB,QAAS,kBAAMP,EAAkB,OAEnC,kBAAC,IAAD,CAAQhD,WAAW,UAAUV,QAAS,WA5D1CV,EAAYsC,EAAYuB,KAAKC,MAAM5D,GAAnCF,CAAmD6C,GAChDkB,MAAK,SAAAtD,GACJsC,EAAYtC,EAAKA,SAElBuD,OAAM,SAAAC,GACLC,QAAQC,IAAIF,QAuDZ,WAEDrD,GAAYA,EAASgB,OAAShB,EAASgB,MAAM0D,OAAS,GACrD,yBAAKjB,MAAO,CAACkB,OAAQ,qBAAsBC,UAAW,WACpD,kBAAC,EAAD,CACE/E,KAAMG,EACNF,QAzDiB,SAACO,EAAIE,GAC9BW,EAAQ2D,KAAR,oBAA0BtE,UCjGxBuE,G,cAAgB,CACpBlE,KAAM,IACNmE,OAAQ,IACRC,MAAO,MAqDMC,EAlDK,SAACrF,GAAW,IAAD,EACPA,EAAdC,YADqB,MACd,GADc,EAG7B,OACE,kBAAC,IAAD,CAAMqF,OAAO,OAAOzB,MAAO,CACzB0B,MAAO,QACPC,QAAS,OACTC,gBAAiB,UAEjB,yBAAKtF,UAAU,uBACb,kBAAC,IAAD,CAAQS,WAAW,WAAnB,UACMX,EAAKN,KAAK,GAAGkB,MAAM,GAAGC,OAAO,IADnC,OACwCb,EAAKN,KAAK,GAAGoB,OAAOD,OAAO,KAEnE,kBAAC,IAAD,CAASE,KAAK,KAAd,UAAsBf,EAAKN,KAAK,GAAGkB,MAAM,GAAzC,aAAgDZ,EAAKN,KAAK,GAAGoB,SAC7D,kBAAC,IAAD,CAAOH,WAAW,aAAaX,EAAKU,KAEtC,yBAAKR,UAAU,oBACb,kBAAC,IAAD,KACE,kBAAC,IAAW+E,EACV,yBAAK/E,UAAU,oBACb,kBAAC,IAAD,CAAYS,WAAW,WAAvB,SACA,kBAAC,IAAD,CAAYA,WAAW,UAAUX,EAAKgB,aAG1C,kBAAC,IAAWiE,EACV,yBAAK/E,UAAU,oBACb,kBAAC,IAAD,CAAYS,WAAW,WAAvB,YACA,kBAAC,IAAD,CAAYA,WAAW,UAAUX,EAAKiB,WAI5C,kBAAC,IAAD,KACE,kBAAC,IAAWgE,EACV,yBAAK/E,UAAU,oBACb,kBAAC,IAAD,CAAYS,WAAW,WAAvB,oBACA,kBAAC,IAAD,CAAYA,WAAW,UAAUX,EAAKyF,cAAgBzF,EAAKyF,cAAcC,KAAO,SAGpF,kBAAC,IAAWT,EACV,yBAAK/E,UAAU,oBACb,kBAAC,IAAD,CAAYS,WAAW,WAAvB,aACA,kBAAC,IAAD,CAAYA,WAAW,UAAUX,EAAK2F,QAAU3F,EAAK2F,QAAQ,GAAGzC,MAAQ,aCiBvE0C,EA7DC,WACd,IAAIvE,EAAUC,cAERuE,EADSC,cACUpF,GACnBa,EAAY,WAChB,IAAMC,EAASC,aAAaC,QAAQ,cACpC,OAAOF,GAAkB,IAGrBG,EAAa,WACjB,IAAM3B,EAAOyB,aAAaC,QAAQ,iBAClC,OAAO1B,GAAa,MAXF,EAcY4B,mBAASL,KAdrB,mBAcbM,EAda,KAcDC,EAdC,OAegBF,mBAASD,KAfzB,mBAeblC,EAfa,KAeEsC,EAfF,OAgBkBH,mBAAS,MAhB3B,mBAgBbmE,EAhBa,KAgBAC,EAhBA,KAkBpB7C,qBAAU,WACRrB,EAAUP,KACVQ,EAAWJ,KACPJ,IJpBsB,SAAC/B,GAAD,IAAgBC,EAAhB,uDAAgC,GAAhC,OAAuC,SAACiB,GACpE,OAAOf,IAAMC,IAAN,UAAaJ,EAAb,oBAAsCkB,GAAM,CACjDb,QAASJ,KImBPwG,CAAepE,EAAYuB,KAAKC,MAAM5D,GAAtCwG,CAAsDJ,GACrDvC,MAAK,SAAAtD,GACJgG,EAAehG,EAAKA,SAErBuD,OAAM,SAAAC,GACLC,QAAQC,IAAIF,MAGdnC,EAAQ2D,KAAK,OAEd,CAACvD,aAAaC,QAAQ,gBAEzB,IAOMwE,EAAoB,CACxBC,MAAM,kBACNC,WACE,kBAAC,IAAD,CACEC,KAXiB,CACrB,CACEC,MAAO,OACPC,KAAM,MASJtG,QAAS,SAAAsG,GAAI,OAAIlF,EAAQ2D,KAAKuB,OAKpC,OACE,yBAAKrG,UAAU,WACb,kBAAC,IAAegG,GAChB,yBAAKhG,UAAU,gBACZ6F,GAAe,kBAAC,EAAD,CAAa/F,KAAM+F,OCrD3CS,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAQC,SAAUC,aAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,gBAAgBD,OAAK,GAC/B,kBAAC,EAAD,UAKRE,SAASC,eAAe,SN6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7D,MAAK,SAAA8D,GACJA,EAAaC,gBAEd9D,OAAM,SAAAgB,GACLd,QAAQc,MAAMA,EAAM+C,c","file":"static/js/main.e5b23a9e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios';\n\nexport const getPatients = (serverAddress, serverHeaders = {}) => (name = '') => {\n  return axios.get(`${serverAddress}/Patient?name=${name}`, {\n    headers: serverHeaders\n  });\n}\n\nexport const getPatientData = (serverAddress, serverHeaders = {}) => (id) => {\n  return axios.get(`${serverAddress}/Patient/${id}`, {\n    headers: serverHeaders\n  });\n}","import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Avatar, Heading, Badge, Subheading } from '@innovaccer/design-system';\nimport './PatientList.css';\n\nconst PatientList = (props) => {\n  const { data = {}, onClick } = props;\n\n  const getPatientCard = (patients = []) => {\n    return patients.map((item, index) => {\n      return (\n        <div className=\"PatientList-itemWrapper\" key={index} onClick={ev => onClick(ev, item.resource.id)}>\n          <div className=\"PatientList-item-heading\">\n            <Avatar appearance=\"primary\">\n              {`${item.resource.name[0].given[0].charAt(0)}${item.resource.name[0].family.charAt(0)}`}\n            </Avatar>\n            <Heading size=\"m\">{`${item.resource.name[0].given[0]}, ${item.resource.name[0].family}`}</Heading>\n            <Badge appearance=\"secondary\">{item.resource.id}</Badge>\n          </div>\n          <div className=\"PatientList-item-info\">\n          <Subheading appearance=\"default\">DOB: </Subheading>\n          <Subheading appearance=\"subtle\">{item.resource.birthDate}</Subheading>\n          <Subheading appearance=\"default\">Gender: </Subheading>\n          <Subheading appearance=\"subtle\">{item.resource.gender}</Subheading>\n          </div>\n        </div>\n      )\n    })\n  }\n\n  return (\n    <div className=\"PatientList\">\n      {getPatientCard(data.entry)}\n    </div>\n  );\n};\n\nexport default PatientList;\n","import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Modal, ModalBody, ModalFooter, ModalHeader, Input, Button, Heading, Textarea, Label } from '@innovaccer/design-system';\nimport { useHistory } from 'react-router-dom';\nimport './Home.css';\nimport { getPatients } from '../api';\nimport PatientList from '../components/PatientList';\n\nconst Home = () => {\n  let history = useHistory();\n  const getServer = () => {\n    const server = localStorage.getItem('fhirServer');\n    return server ? server : '';\n  };\n\n  const getHeaders = () => {\n    const data = localStorage.getItem('serverHeaders');\n    return data ? data: '{}';\n  };\n\n  const [fhirServer, setServer] = useState(getServer());\n  const [serverHeaders, setHeaders] = useState(getHeaders());\n  const [invalidHeader, setHeaderStatus] = useState(false);\n  const [modalState, setModalState] = useState(getServer() ? false : true);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [patients, setPatients] = useState([]);\n\n  const onModalClose = () => {\n    if (getServer()) {\n      setModalState(false);\n      setServer(getServer())\n    } else {\n      return null;\n    }\n  }\n\n  const modalOptions = {\n    open: modalState,\n    onClose: onModalClose,\n    backdrop: false,\n    dimension: 'small'\n  };\n\n  const modalHeaderOptions = {\n    onClose: onModalClose,\n    icon: 'pan_tool',\n    heading: 'FHIR Server',\n    subHeading: 'FHIR Server address'\n  };\n\n  const handleServerInput = (value) => {\n    setServer(value);\n  };\n\n  const handleHeaderInput = (value) => {\n    let temp;\n    try {\n      temp = JSON.parse(value);\n      setHeaderStatus(false);\n      setHeaders(value)\n    } catch (e) {\n      setHeaderStatus(true);\n      setHeaders(value);\n    };\n  };\n\n  const updateServer = () => {\n    localStorage.setItem('fhirServer', fhirServer);\n    localStorage.setItem('serverHeaders', serverHeaders);\n    setModalState(false);\n    setPatients([]);\n  }\n\n  useEffect(() => {\n    setServer(getServer());\n    setHeaders(getHeaders());\n    if (getServer()) {\n      getPatients(fhirServer, JSON.parse(serverHeaders))(searchQuery)\n      .then(data => {\n        setPatients(data.data);\n      })\n      .catch(err => {\n        console.log(err)\n      })\n    }\n  }, [localStorage.getItem('fhirServer'), modalState]);\n\n  const handleSearchInput = (value) => {\n    setSearchQuery(value);\n  };\n\n  const handleSearch = () => {\n    getPatients(fhirServer, JSON.parse(serverHeaders))(searchQuery)\n      .then(data => {\n        setPatients(data.data);\n      })\n      .catch(err => {\n        console.log(err)\n      })\n  }\n\n  const drillToPatientInfo = (ev, id) => {\n    history.push(`/patients/${id}`);\n  };\n\n  console.log(patients)\n\n  return (\n    <div className=\"Home\">\n      <Modal {...modalOptions}>\n        <ModalHeader {...modalHeaderOptions} />\n        <ModalBody>\n          <Label style={{margin: '0px 0 4px'}}>Address</Label>\n          <Input\n            clearButton={true}\n            value={fhirServer}\n            name=\"input\"\n            placeholder=\"Search\"\n            onChange={(ev) => handleServerInput(ev.target.value)}\n            onClear={() => handleServerInput('')}\n          />\n          <Label style={{margin: '8px 0 4px'}}>Headers</Label>\n          <Textarea\n            name=\"Textarea\"\n            placeholder=\"Headers\"\n            rows={5}\n            onChange={ev => handleHeaderInput(ev.target.value)}\n            defaultValue={serverHeaders}\n            error={invalidHeader} />\n        </ModalBody>\n        <ModalFooter>\n          <Button appearance=\"primary\" onClick={() => updateServer()} disabled={!fhirServer || invalidHeader}>Submit</Button>\n        </ModalFooter>\n      </Modal>\n      <div className=\"PageHeader-wrapper\">\n        <div className=\"PageHeader\">\n          <Heading size=\"m\">Patients</Heading>\n          <div style={{ display: 'flex', justifyContent: 'flex-end', alignItems: 'center' }}>\n            <Button appearance=\"primary\" onClick={() => setModalState(true)}>Change Server</Button>\n          </div>\n        </div>\n      </div>\n      <div className=\"Search-wrapper\">\n        <Input\n          clearButton={true}\n          value={searchQuery}\n          icon=\"search\"\n          name=\"input\"\n          placeholder=\"Search\"\n          onChange={(ev) => handleSearchInput(ev.target.value)}\n          onClear={() => handleSearchInput('')}\n          />\n        <Button appearance=\"primary\" onClick={() => handleSearch()}>Search</Button>\n      </div>\n      {patients && patients.entry && patients.entry.length > 0 && (\n        <div style={{height: 'calc(100vh - 112px', overflowY: 'scroll'}}>\n          <PatientList\n            data={patients}\n            onClick={drillToPatientInfo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport { Avatar, Heading, Badge, Card, Row, Column, Subheading } from '@innovaccer/design-system';\nimport './PatientInfo.css';\n\nconst columnOptions = {\n  size: '6',\n  sizeXL: '6',\n  sizeM: '6'\n};\n\nconst PatientInfo = (props) => {\n  const { data = {} } = props;\n\n  return (\n    <Card shadow=\"dark\" style={{\n      width: '600px',\n      padding: '16px',\n      backgroundColor: 'white'\n    }}>\n      <div className=\"PatientInfo-heading\">\n        <Avatar appearance=\"primary\">\n          {`${data.name[0].given[0].charAt(0)}${data.name[0].family.charAt(0)}`}\n        </Avatar>\n        <Heading size=\"m\">{`${data.name[0].given[0]}, ${data.name[0].family}`}</Heading>\n        <Badge appearance=\"secondary\">{data.id}</Badge>\n      </div>\n      <div className=\"PatientInfo-body\">\n        <Row>\n          <Column {...columnOptions}>\n            <div className=\"PatientInfo-item\">\n              <Subheading appearance=\"default\">DOB: </Subheading>\n              <Subheading appearance=\"subtle\">{data.birthDate}</Subheading>\n            </div>\n          </Column>\n          <Column {...columnOptions}>\n            <div className=\"PatientInfo-item\">\n              <Subheading appearance=\"default\">Gender: </Subheading>\n              <Subheading appearance=\"subtle\">{data.gender}</Subheading>\n            </div>\n          </Column>\n        </Row>\n        <Row>\n          <Column {...columnOptions}>\n            <div className=\"PatientInfo-item\">\n              <Subheading appearance=\"default\">Marital Status: </Subheading>\n              <Subheading appearance=\"subtle\">{data.maritalStatus ? data.maritalStatus.text : 'N/A'}</Subheading>\n            </div>\n          </Column>\n          <Column {...columnOptions}>\n            <div className=\"PatientInfo-item\">\n              <Subheading appearance=\"default\">Contact: </Subheading>\n              <Subheading appearance=\"subtle\">{data.telecom ? data.telecom[0].value : 'N/A'}</Subheading>\n            </div>\n          </Column>\n        </Row>\n      </div>\n    </Card>\n  );\n};\n\nexport default PatientInfo;\n","import React, { useState, useEffect } from 'react';\nimport { PageHeader, Breadcrumbs, Card } from '@innovaccer/design-system';\nimport { useHistory, useParams } from 'react-router-dom';\nimport './Summary.css';\nimport { getPatientData } from '../api';\nimport PatientInfo from '../components/PatientInfo';\n\nconst Summary = () => {\n  let history = useHistory();\n  const params = useParams();\n  const patientId = params.id;\n  const getServer = () => {\n    const server = localStorage.getItem('fhirServer');\n    return server ? server : '';\n  };\n\n  const getHeaders = () => {\n    const data = localStorage.getItem('serverHeaders');\n    return data ? data: '{}';\n  };\n\n  const [fhirServer, setServer] = useState(getServer());\n  const [serverHeaders, setHeaders] = useState(getHeaders());\n  const [patientData, setPatientData] = useState(null);\n\n  useEffect(() => {\n    setServer(getServer());\n    setHeaders(getHeaders());\n    if (getServer()) {\n      getPatientData(fhirServer, JSON.parse(serverHeaders))(patientId)\n      .then(data => {\n        setPatientData(data.data);\n      })\n      .catch(err => {\n        console.log(err)\n      })\n    } else {\n      history.push('/');\n    }\n  }, [localStorage.getItem('fhirServer')]);\n\n  const breadcrumbData = [\n    {\n      label: 'Home',\n      link: '/'\n    }\n  ];\n\n  const pageheaderOptions = {\n    title: `Patient Summary`,\n    breadcrumb: (\n      <Breadcrumbs\n        list={breadcrumbData}\n        onClick={link => history.push(link)}\n      />\n    )\n  }\n\n  return (\n    <div className=\"Summary\">\n      <PageHeader {...pageheaderOptions} />\n      <div className=\"Summary-body\">\n        {patientData && <PatientInfo data={patientData} />}\n      </div>\n    </div>\n  );\n};\n\nexport default Summary;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport Home from './Home';\nimport Summary from './Summary';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route path=\"/patients/:id\" exact>\n          <Summary />\n        </Route>\n      </Switch>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}