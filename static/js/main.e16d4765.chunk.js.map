{"version":3,"sources":["serviceWorker.js","api/index.js","components/PatientList/index.js","Home/index.js","index.js"],"names":["Boolean","window","location","hostname","match","getPatients","serverAddress","name","axios","get","PatientList","props","data","className","patients","map","item","index","key","appearance","resource","given","charAt","family","size","id","birthDate","gender","getPatientCard","entry","Home","getServer","server","localStorage","getItem","useState","fhirServer","setServer","modalState","setModalState","searchQuery","setSearchQuery","setPatients","onModalClose","modalOptions","open","onClose","backdrop","dimension","modalHeaderOptions","icon","heading","subHeading","handleServerInput","value","useEffect","then","catch","err","console","log","handleSearchInput","clearButton","placeholder","onChange","ev","target","onClear","onClick","setItem","disabled","style","display","justifyContent","alignItems","total","height","overflowY","ReactDOM","render","StrictMode","basename","process","exact","path","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e16d4765.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios';\n\nexport const getPatients = serverAddress => (name = '') => {\n  return axios.get(`${serverAddress}/Patient?name=${name}`);\n}","import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Avatar, Heading, Badge, Subheading } from '@innovaccer/design-system';\nimport './PatientList.css';\n\nconst PatientList = (props) => {\n  const { data = {} } = props;\n\n  const getPatientCard = (patients = []) => {\n    return patients.map((item, index) => {\n      return (\n        <div className=\"PatientList-itemWrapper\" key={index}>\n          <div className=\"PatientList-item-heading\">\n            <Avatar appearance=\"primary\">\n              {`${item.resource.name[0].given[0].charAt(0)}${item.resource.name[0].family.charAt(0)}`}\n            </Avatar>\n            <Heading size=\"m\">{`${item.resource.name[0].given[0]}, ${item.resource.name[0].family}`}</Heading>\n            <Badge appearance=\"secondary\">{item.resource.id}</Badge>\n          </div>\n          <div className=\"PatientList-item-info\">\n          <Subheading appearance=\"default\">DOB: </Subheading>\n          <Subheading appearance=\"subtle\">{item.resource.birthDate}</Subheading>\n          <Subheading appearance=\"default\">Gender: </Subheading>\n          <Subheading appearance=\"subtle\">{item.resource.gender}</Subheading>\n          </div>\n        </div>\n      )\n    })\n  }\n\n  return (\n    <div className=\"PatientList\">\n      {getPatientCard(data.entry)}\n    </div>\n  );\n};\n\nexport default PatientList;\n","import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Modal, ModalBody, ModalFooter, ModalHeader, Input, Button, Heading } from '@innovaccer/design-system';\nimport './Home.css';\nimport { getPatients } from '../api';\nimport PatientList from '../components/PatientList';\n\nconst Home = () => {\n  const getServer = () => {\n    const server = localStorage.getItem('fhirServer');\n    return server ? server : '';\n  };\n\n  const [fhirServer, setServer] = useState(getServer());\n  const [modalState, setModalState] = useState(getServer() ? false : true);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [patients, setPatients] = useState([]);\n\n  const onModalClose = () => {\n    if (getServer()) {\n      setModalState(false);\n      setServer(getServer())\n    } else {\n      return null;\n    }\n  }\n\n  const modalOptions = {\n    open: modalState,\n    onClose: onModalClose,\n    backdrop: false,\n    dimension: 'small'\n  };\n\n  const modalHeaderOptions = {\n    onClose: onModalClose,\n    icon: 'pan_tool',\n    heading: 'FHIR Server',\n    subHeading: 'FHIR Server address'\n  };\n\n  const handleServerInput = (value) => {\n    setServer(value);\n  };\n\n  const updateServer = () => {\n    localStorage.setItem('fhirServer', fhirServer);\n    setModalState(false);\n    setPatients([]);\n  }\n\n  useEffect(() => {\n    setServer(getServer());\n    if (getServer()) {\n      getPatients(fhirServer)(searchQuery)\n      .then(data => {\n        setPatients(data.data);\n      })\n      .catch(err => {\n        console.log(err)\n      })\n    }\n  }, [localStorage.getItem('fhirServer'), modalState]);\n\n  const handleSearchInput = (value) => {\n    setSearchQuery(value);\n  };\n\n  const handleSearch = () => {\n    getPatients(fhirServer)(searchQuery)\n      .then(data => {\n        setPatients(data.data);\n      })\n      .catch(err => {\n        console.log(err)\n      })\n  }\n\n  return (\n    <div className=\"Home\">\n      <Modal {...modalOptions}>\n        <ModalHeader {...modalHeaderOptions} />\n        <ModalBody>\n        <Input\n          clearButton={true}\n          value={fhirServer}\n          name=\"input\"\n          placeholder=\"Search\"\n          onChange={(ev) => handleServerInput(ev.target.value)}\n          onClear={() => handleServerInput('')}\n        />\n        </ModalBody>\n        <ModalFooter>\n          <Button appearance=\"primary\" onClick={() => updateServer()} disabled={!fhirServer}>Submit</Button>\n        </ModalFooter>\n      </Modal>\n      <div className=\"PageHeader-wrapper\">\n        <div className=\"PageHeader\">\n          <Heading size=\"m\">Patients</Heading>\n          <div style={{ display: 'flex', justifyContent: 'flex-end', alignItems: 'center' }}>\n            <Button appearance=\"primary\" onClick={() => setModalState(true)}>Change Server</Button>\n          </div>\n        </div>\n      </div>\n      <div className=\"Search-wrapper\">\n        <Input\n          clearButton={true}\n          value={searchQuery}\n          icon=\"search\"\n          name=\"input\"\n          placeholder=\"Search\"\n          onChange={(ev) => handleSearchInput(ev.target.value)}\n          onClear={() => handleSearchInput('')}\n          />\n        <Button appearance=\"primary\" onClick={() => handleSearch()}>Search</Button>\n      </div>\n      {patients && patients.total > 0 && (\n        <div style={{height: 'calc(100vh - 112px', overflowY: 'scroll'}}>\n          <PatientList\n            data={patients}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport Home from './Home';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}